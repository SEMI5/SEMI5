/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.45
 * Generated at: 2019-10-19 13:03:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.chatting;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class NewFile_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\r\n");
      out.write("\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("\t<title>chatting</title>\r\n");
      out.write("\t<style>\r\n");
      out.write("\t\r\n");
      out.write("html, body {\r\n");
      out.write("  font-family: 'Roboto', 'Helvetica', sans-serif;\r\n");
      out.write("}\r\n");
      out.write("main, #messages-card {\r\n");
      out.write("  height: 100%;\r\n");
      out.write("  padding-bottom: 0;\r\n");
      out.write("}\r\n");
      out.write("#messages-card-container {\r\n");
      out.write("  height: calc(100% - 35px);\r\n");
      out.write("  padding-bottom: 0;\r\n");
      out.write("}\r\n");
      out.write("#messages-card {\r\n");
      out.write("  margin-top: 15px;\r\n");
      out.write("}\r\n");
      out.write(".mdl-layout__header-row span {\r\n");
      out.write("  margin-left: 15px;\r\n");
      out.write("  margin-top: 17px;\r\n");
      out.write("}\r\n");
      out.write(".mdl-grid {\r\n");
      out.write("  max-width: 1024px;\r\n");
      out.write("  margin: auto;\r\n");
      out.write("}\r\n");
      out.write(".material-icons {\r\n");
      out.write("  font-size: 36px;\r\n");
      out.write("  top: 8px;\r\n");
      out.write("  position: relative;\r\n");
      out.write("}\r\n");
      out.write(".mdl-layout__header-row {\r\n");
      out.write("  padding: 0;\r\n");
      out.write("  margin: 0 auto;\r\n");
      out.write("}\r\n");
      out.write(".mdl-card__supporting-text {\r\n");
      out.write("  width: auto;\r\n");
      out.write("  height: 100%;\r\n");
      out.write("  padding-top: 0;\r\n");
      out.write("  padding-bottom: 0;\r\n");
      out.write("}\r\n");
      out.write("#messages {\r\n");
      out.write("  overflow-y: auto;\r\n");
      out.write("  margin-bottom: 10px;\r\n");
      out.write("  height: calc(100% - 80px);\r\n");
      out.write("  display: flex;\r\n");
      out.write("  flex-direction: column;\r\n");
      out.write("}\r\n");
      out.write("#message-filler {\r\n");
      out.write("  flex-grow: 1;\r\n");
      out.write("}\r\n");
      out.write(".message-container:first-of-type {\r\n");
      out.write("  border-top-width: 0;\r\n");
      out.write("}\r\n");
      out.write(".message-container {\r\n");
      out.write("  display: block;\r\n");
      out.write("  margin-top: 10px;\r\n");
      out.write("  border-top: 1px solid #f3f3f3;\r\n");
      out.write("  padding-top: 10px;\r\n");
      out.write("  opacity: 0;\r\n");
      out.write("  transition: opacity 1s ease-in-out;\r\n");
      out.write("}\r\n");
      out.write(".message-container.visible {\r\n");
      out.write("  opacity: 1;\r\n");
      out.write("}\r\n");
      out.write(".message-container .pic {\r\n");
      out.write("  background-image: url('/images/profile_placeholder.png');\r\n");
      out.write("  background-repeat: no-repeat;\r\n");
      out.write("  width: 30px;\r\n");
      out.write("  height: 30px;\r\n");
      out.write("  background-size: 30px;\r\n");
      out.write("  border-radius: 20px;\r\n");
      out.write("}\r\n");
      out.write(".message-container .spacing {\r\n");
      out.write("  display: table-cell;\r\n");
      out.write("  vertical-align: top;\r\n");
      out.write("}\r\n");
      out.write(".message-container .message {\r\n");
      out.write("  display: table-cell;\r\n");
      out.write("  width: calc(100% - 40px);\r\n");
      out.write("  padding: 5px 0 5px 10px;\r\n");
      out.write("}\r\n");
      out.write(".message-container .name {\r\n");
      out.write("  display: inline-block;\r\n");
      out.write("  width: 100%;\r\n");
      out.write("  padding-left: 40px;\r\n");
      out.write("  color: #bbb;\r\n");
      out.write("  font-style: italic;\r\n");
      out.write("  font-size: 12px;\r\n");
      out.write("  box-sizing: border-box;\r\n");
      out.write("}\r\n");
      out.write("#message-form {\r\n");
      out.write("  display: flex;\r\n");
      out.write("  flex-direction: row;\r\n");
      out.write("  width: calc(100% - 48px);\r\n");
      out.write("  float: left;\r\n");
      out.write("}\r\n");
      out.write("#image-form {\r\n");
      out.write("  display: flex;\r\n");
      out.write("  flex-direction: row;\r\n");
      out.write("  width: 48px;\r\n");
      out.write("  float: right;\r\n");
      out.write("}\r\n");
      out.write("#message-form .mdl-textfield {\r\n");
      out.write("  width: calc(100% - 100px);\r\n");
      out.write("}\r\n");
      out.write("#message-form button, #image-form button {\r\n");
      out.write("  width: 100px;\r\n");
      out.write("  margin: 15px 0 0 10px;\r\n");
      out.write("}\r\n");
      out.write(".mdl-card {\r\n");
      out.write("  min-height: 0;\r\n");
      out.write("}\r\n");
      out.write(".mdl-card {\r\n");
      out.write("  background: linear-gradient(white, #f9f9f9);\r\n");
      out.write("  justify-content: space-between;\r\n");
      out.write("}\r\n");
      out.write("#user-container {\r\n");
      out.write("  position: absolute;\r\n");
      out.write("  display: flex;\r\n");
      out.write("  flex-direction: row;\r\n");
      out.write("  top: 22px;\r\n");
      out.write("  width: 100%;\r\n");
      out.write("  right: 0;\r\n");
      out.write("  padding-left: 10px;\r\n");
      out.write("  justify-content: flex-end;\r\n");
      out.write("  padding-right: 10px;\r\n");
      out.write("}\r\n");
      out.write("#user-container #user-pic {\r\n");
      out.write("  top: -3px;\r\n");
      out.write("  position: relative;\r\n");
      out.write("  display: inline-block;\r\n");
      out.write("  background-image: url('/images/profile_placeholder.png');\r\n");
      out.write("  background-repeat: no-repeat;\r\n");
      out.write("  width: 40px;\r\n");
      out.write("  height: 40px;\r\n");
      out.write("  background-size: 40px;\r\n");
      out.write("  border-radius: 20px;\r\n");
      out.write("}\r\n");
      out.write("#user-container #user-name {\r\n");
      out.write("  font-size: 16px;\r\n");
      out.write("  line-height: 36px;\r\n");
      out.write("  padding-right: 10px;\r\n");
      out.write("  padding-left: 20px;\r\n");
      out.write("}\r\n");
      out.write("#image-form #submitImage {\r\n");
      out.write("  width: auto;\r\n");
      out.write("  padding: 0 6px 0 1px;\r\n");
      out.write("  min-width: 0;\r\n");
      out.write("}\r\n");
      out.write("#image-form #submitImage .material-icons {\r\n");
      out.write("  top: -1px;\r\n");
      out.write("}\r\n");
      out.write(".message img {\r\n");
      out.write("  max-width: 300px;\r\n");
      out.write("  max-height: 200px;\r\n");
      out.write("}\r\n");
      out.write("#mediaCapture {\r\n");
      out.write("  display: none;\r\n");
      out.write("}\r\n");
      out.write("@media screen and (max-width: 610px) {\r\n");
      out.write("  header {\r\n");
      out.write("    height: 113px;\r\n");
      out.write("    padding-bottom: 80px !important;\r\n");
      out.write("  }\r\n");
      out.write("  #user-container {\r\n");
      out.write("    top: 72px;\r\n");
      out.write("    background-color: rgb(3,155,229);\r\n");
      out.write("    height: 38px;\r\n");
      out.write("    padding-top: 3px;\r\n");
      out.write("    padding-right: 2px;\r\n");
      out.write("  }\r\n");
      out.write("  #user-container #user-pic {\r\n");
      out.write("    top: 2px;\r\n");
      out.write("    width: 33px;\r\n");
      out.write("    height: 33px;\r\n");
      out.write("    background-size: 33px;\r\n");
      out.write("  }\r\n");
      out.write("}\r\n");
      out.write(".mdl-textfield__label:after {\r\n");
      out.write("  background-color: #0288D1;\r\n");
      out.write("}\r\n");
      out.write(".mdl-textfield--floating-label.is-focused .mdl-textfield__label {\r\n");
      out.write("  color: #0288D1;\r\n");
      out.write("}\r\n");
      out.write(".mdl-button .material-icons {\r\n");
      out.write("  top: -1px;\r\n");
      out.write("  margin-right: 5px;\r\n");
      out.write("}\r\n");
      out.write("\t</style>\r\n");
      out.write("\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t// Signs-in Friendly Chat.\r\n");
      out.write("\tfunction signIn() {\r\n");
      out.write("\t  // Sign in Firebase using popup auth and Google as the identity provider.\r\n");
      out.write("\t  var provider = new firebase.auth.GoogleAuthProvider();\r\n");
      out.write("\t  firebase.auth().signInWithPopup(provider);\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// Signs-out of Friendly Chat.\r\n");
      out.write("\tfunction signOut() {\r\n");
      out.write("\t  // Sign out of Firebase.\r\n");
      out.write("\t  firebase.auth().signOut();\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// Initiate firebase auth.\r\n");
      out.write("\tfunction initFirebaseAuth() {\r\n");
      out.write("\t  // Listen to auth state changes.\r\n");
      out.write("\t  firebase.auth().onAuthStateChanged(authStateObserver);\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// Returns the signed-in user's profile Pic URL.\r\n");
      out.write("\tfunction getProfilePicUrl() {\r\n");
      out.write("\t  return firebase.auth().currentUser.photoURL || '/images/profile_placeholder.png';\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// Returns the signed-in user's display name.\r\n");
      out.write("\tfunction getUserName() {\r\n");
      out.write("\t  return firebase.auth().currentUser.displayName;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// Returns true if a user is signed-in.\r\n");
      out.write("\tfunction isUserSignedIn() {\r\n");
      out.write("\t  return !!firebase.auth().currentUser;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// Saves a new message on the Cloud Firestore.\r\n");
      out.write("\tfunction saveMessage(messageText) {\r\n");
      out.write("\t  // Add a new message entry to the Firebase database.\r\n");
      out.write("\t  return firebase.firestore().collection('messages').add({\r\n");
      out.write("\t    name: getUserName(),\r\n");
      out.write("\t    text: messageText,\r\n");
      out.write("\t    profilePicUrl: getProfilePicUrl(),\r\n");
      out.write("\t    timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n");
      out.write("\t  }).catch(function(error) {\r\n");
      out.write("\t    console.error('Error writing new message to Firebase Database', error);\r\n");
      out.write("\t  });\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// Loads chat messages history and listens for upcoming ones.\r\n");
      out.write("\tfunction loadMessages() {\r\n");
      out.write("\t  // Create the query to load the last 12 messages and listen for new ones.\r\n");
      out.write("\t  var query = firebase.firestore().collection('messages').orderBy('timestamp', 'desc').limit(12);\r\n");
      out.write("\t  \r\n");
      out.write("\t  // Start listening to the query.\r\n");
      out.write("\t  query.onSnapshot(function(snapshot) {\r\n");
      out.write("\t    snapshot.docChanges().forEach(function(change) {\r\n");
      out.write("\t      if (change.type === 'removed') {\r\n");
      out.write("\t        deleteMessage(change.doc.id);\r\n");
      out.write("\t      } else {\r\n");
      out.write("\t        var message = change.doc.data();\r\n");
      out.write("\t        displayMessage(change.doc.id, message.timestamp, message.name,\r\n");
      out.write("\t                      message.text, message.profilePicUrl, message.imageUrl);\r\n");
      out.write("\t      }\r\n");
      out.write("\t    });\r\n");
      out.write("\t  });\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// Saves a new message containing an image in Firebase.\r\n");
      out.write("\t// This first saves the image in Firebase storage.\r\n");
      out.write("\tfunction saveImageMessage(file) {\r\n");
      out.write("\t  // 1 - We add a message with a loading icon that will get updated with the shared image.\r\n");
      out.write("\t  firebase.firestore().collection('messages').add({\r\n");
      out.write("\t    name: getUserName(),\r\n");
      out.write("\t    imageUrl: LOADING_IMAGE_URL,\r\n");
      out.write("\t    profilePicUrl: getProfilePicUrl(),\r\n");
      out.write("\t    timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n");
      out.write("\t  }).then(function(messageRef) {\r\n");
      out.write("\t    // 2 - Upload the image to Cloud Storage.\r\n");
      out.write("\t    var filePath = firebase.auth().currentUser.uid + '/' + messageRef.id + '/' + file.name;\r\n");
      out.write("\t    return firebase.storage().ref(filePath).put(file).then(function(fileSnapshot) {\r\n");
      out.write("\t      // 3 - Generate a public URL for the file.\r\n");
      out.write("\t      return fileSnapshot.ref.getDownloadURL().then((url) => {\r\n");
      out.write("\t        // 4 - Update the chat message placeholder with the image’s URL.\r\n");
      out.write("\t        return messageRef.update({\r\n");
      out.write("\t          imageUrl: url,\r\n");
      out.write("\t          storageUri: fileSnapshot.metadata.fullPath\r\n");
      out.write("\t        });\r\n");
      out.write("\t      });\r\n");
      out.write("\t    });\r\n");
      out.write("\t  }).catch(function(error) {\r\n");
      out.write("\t    console.error('There was an error uploading a file to Cloud Storage:', error);\r\n");
      out.write("\t  });\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// Saves the messaging device token to the datastore.\r\n");
      out.write("\tfunction saveMessagingDeviceToken() {\r\n");
      out.write("\t  firebase.messaging().getToken().then(function(currentToken) {\r\n");
      out.write("\t    if (currentToken) {\r\n");
      out.write("\t      console.log('Got FCM device token:', currentToken);\r\n");
      out.write("\t      // Saving the Device Token to the datastore.\r\n");
      out.write("\t      firebase.firestore().collection('fcmTokens').doc(currentToken)\r\n");
      out.write("\t          .set({uid: firebase.auth().currentUser.uid});\r\n");
      out.write("\t    } else {\r\n");
      out.write("\t      // Need to request permissions to show notifications.\r\n");
      out.write("\t      requestNotificationsPermissions();\r\n");
      out.write("\t    }\r\n");
      out.write("\t  }).catch(function(error){\r\n");
      out.write("\t    console.error('Unable to get messaging token.', error);\r\n");
      out.write("\t  });\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// Requests permissions to show notifications.\r\n");
      out.write("\tfunction requestNotificationsPermissions() {\r\n");
      out.write("\t  console.log('Requesting notifications permission...');\r\n");
      out.write("\t  firebase.messaging().requestPermission().then(function() {\r\n");
      out.write("\t    // Notification permission granted.\r\n");
      out.write("\t    saveMessagingDeviceToken();\r\n");
      out.write("\t  }).catch(function(error) {\r\n");
      out.write("\t    console.error('Unable to get permission to notify.', error);\r\n");
      out.write("\t  });\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// Triggered when a file is selected via the media picker.\r\n");
      out.write("\tfunction onMediaFileSelected(event) {\r\n");
      out.write("\t  event.preventDefault();\r\n");
      out.write("\t  var file = event.target.files[0];\r\n");
      out.write("\r\n");
      out.write("\t  // Clear the selection in the file picker input.\r\n");
      out.write("\t  imageFormElement.reset();\r\n");
      out.write("\r\n");
      out.write("\t  // Check if the file is an image.\r\n");
      out.write("\t  if (!file.type.match('image.*')) {\r\n");
      out.write("\t    var data = {\r\n");
      out.write("\t      message: 'You can only share images',\r\n");
      out.write("\t      timeout: 2000\r\n");
      out.write("\t    };\r\n");
      out.write("\t    signInSnackbarElement.MaterialSnackbar.showSnackbar(data);\r\n");
      out.write("\t    return;\r\n");
      out.write("\t  }\r\n");
      out.write("\t  // Check if the user is signed-in\r\n");
      out.write("\t  if (checkSignedInWithMessage()) {\r\n");
      out.write("\t    saveImageMessage(file);\r\n");
      out.write("\t  }\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// Triggered when the send new message form is submitted.\r\n");
      out.write("\tfunction onMessageFormSubmit(e) {\r\n");
      out.write("\t  e.preventDefault();\r\n");
      out.write("\t  // Check that the user entered a message and is signed in.\r\n");
      out.write("\t  if (messageInputElement.value && checkSignedInWithMessage()) {\r\n");
      out.write("\t    saveMessage(messageInputElement.value).then(function() {\r\n");
      out.write("\t      // Clear message text field and re-enable the SEND button.\r\n");
      out.write("\t      resetMaterialTextfield(messageInputElement);\r\n");
      out.write("\t      toggleButton();\r\n");
      out.write("\t    });\r\n");
      out.write("\t  }\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// Triggers when the auth state change for instance when the user signs-in or signs-out.\r\n");
      out.write("\tfunction authStateObserver(user) {\r\n");
      out.write("\t  if (user) { // User is signed in!\r\n");
      out.write("\t    // Get the signed-in user's profile pic and name.\r\n");
      out.write("\t    var profilePicUrl = getProfilePicUrl();\r\n");
      out.write("\t    var userName = getUserName();\r\n");
      out.write("\r\n");
      out.write("\t    // Set the user's profile pic and name.\r\n");
      out.write("\t    userPicElement.style.backgroundImage = 'url(' + addSizeToGoogleProfilePic(profilePicUrl) + ')';\r\n");
      out.write("\t    userNameElement.textContent = userName;\r\n");
      out.write("\r\n");
      out.write("\t    // Show user's profile and sign-out button.\r\n");
      out.write("\t    userNameElement.removeAttribute('hidden');\r\n");
      out.write("\t    userPicElement.removeAttribute('hidden');\r\n");
      out.write("\t    signOutButtonElement.removeAttribute('hidden');\r\n");
      out.write("\r\n");
      out.write("\t    // Hide sign-in button.\r\n");
      out.write("\t    signInButtonElement.setAttribute('hidden', 'true');\r\n");
      out.write("\r\n");
      out.write("\t    // We save the Firebase Messaging Device token and enable notifications.\r\n");
      out.write("\t    saveMessagingDeviceToken();\r\n");
      out.write("\t  } else { // User is signed out!\r\n");
      out.write("\t    // Hide user's profile and sign-out button.\r\n");
      out.write("\t    userNameElement.setAttribute('hidden', 'true');\r\n");
      out.write("\t    userPicElement.setAttribute('hidden', 'true');\r\n");
      out.write("\t    signOutButtonElement.setAttribute('hidden', 'true');\r\n");
      out.write("\r\n");
      out.write("\t    // Show sign-in button.\r\n");
      out.write("\t    signInButtonElement.removeAttribute('hidden');\r\n");
      out.write("\t  }\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// Returns true if user is signed-in. Otherwise false and displays a message.\r\n");
      out.write("\tfunction checkSignedInWithMessage() {\r\n");
      out.write("\t  // Return true if the user is signed in Firebase\r\n");
      out.write("\t  if (isUserSignedIn()) {\r\n");
      out.write("\t    return true;\r\n");
      out.write("\t  }\r\n");
      out.write("\r\n");
      out.write("\t  // Display a message to the user using a Toast.\r\n");
      out.write("\t  var data = {\r\n");
      out.write("\t    message: 'You must sign-in first',\r\n");
      out.write("\t    timeout: 2000\r\n");
      out.write("\t  };\r\n");
      out.write("\t  signInSnackbarElement.MaterialSnackbar.showSnackbar(data);\r\n");
      out.write("\t  return false;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// Resets the given MaterialTextField.\r\n");
      out.write("\tfunction resetMaterialTextfield(element) {\r\n");
      out.write("\t  element.value = '';\r\n");
      out.write("\t  element.parentNode.MaterialTextfield.boundUpdateClassesHandler();\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// Template for messages.\r\n");
      out.write("\tvar MESSAGE_TEMPLATE =\r\n");
      out.write("\t    '<div class=\"message-container\">' +\r\n");
      out.write("\t      '<div class=\"spacing\"><div class=\"pic\"></div></div>' +\r\n");
      out.write("\t      '<div class=\"message\"></div>' +\r\n");
      out.write("\t      '<div class=\"name\"></div>' +\r\n");
      out.write("\t    '</div>';\r\n");
      out.write("\r\n");
      out.write("\t// Adds a size to Google Profile pics URLs.\r\n");
      out.write("\tfunction addSizeToGoogleProfilePic(url) {\r\n");
      out.write("\t  if (url.indexOf('googleusercontent.com') !== -1 && url.indexOf('?') === -1) {\r\n");
      out.write("\t    return url + '?sz=150';\r\n");
      out.write("\t  }\r\n");
      out.write("\t  return url;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// A loading image URL.\r\n");
      out.write("\tvar LOADING_IMAGE_URL = 'https://www.google.com/images/spin-32.gif?a';\r\n");
      out.write("\r\n");
      out.write("\t// Delete a Message from the UI.\r\n");
      out.write("\tfunction deleteMessage(id) {\r\n");
      out.write("\t  var div = document.getElementById(id);\r\n");
      out.write("\t  // If an element for that message exists we delete it.\r\n");
      out.write("\t  if (div) {\r\n");
      out.write("\t    div.parentNode.removeChild(div);\r\n");
      out.write("\t  }\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction createAndInsertMessage(id, timestamp) {\r\n");
      out.write("\t  const container = document.createElement('div');\r\n");
      out.write("\t  container.innerHTML = MESSAGE_TEMPLATE;\r\n");
      out.write("\t  const div = container.firstChild;\r\n");
      out.write("\t  div.setAttribute('id', id);\r\n");
      out.write("\r\n");
      out.write("\t  // If timestamp is null, assume we've gotten a brand new message.\r\n");
      out.write("\t  // https://stackoverflow.com/a/47781432/4816918\r\n");
      out.write("\t  timestamp = timestamp ? timestamp.toMillis() : Date.now();\r\n");
      out.write("\t  div.setAttribute('timestamp', timestamp);\r\n");
      out.write("\r\n");
      out.write("\t  // figure out where to insert new message\r\n");
      out.write("\t  const existingMessages = messageListElement.children;\r\n");
      out.write("\t  if (existingMessages.length === 0) {\r\n");
      out.write("\t    messageListElement.appendChild(div);\r\n");
      out.write("\t  } else {\r\n");
      out.write("\t    let messageListNode = existingMessages[0];\r\n");
      out.write("\r\n");
      out.write("\t    while (messageListNode) {\r\n");
      out.write("\t      const messageListNodeTime = messageListNode.getAttribute('timestamp');\r\n");
      out.write("\r\n");
      out.write("\t      if (!messageListNodeTime) {\r\n");
      out.write("\t        throw new Error(\r\n");
      out.write("\t          `Child ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${messageListNode.id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(" has no 'timestamp' attribute`\r\n");
      out.write("\t        );\r\n");
      out.write("\t      }\r\n");
      out.write("\r\n");
      out.write("\t      if (messageListNodeTime > timestamp) {\r\n");
      out.write("\t        break;\r\n");
      out.write("\t      }\r\n");
      out.write("\r\n");
      out.write("\t      messageListNode = messageListNode.nextSibling;\r\n");
      out.write("\t    }\r\n");
      out.write("\r\n");
      out.write("\t    messageListElement.insertBefore(div, messageListNode);\r\n");
      out.write("\t  }\r\n");
      out.write("\r\n");
      out.write("\t  return div;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// Displays a Message in the UI.\r\n");
      out.write("\tfunction displayMessage(id, timestamp, name, text, picUrl, imageUrl) {\r\n");
      out.write("\t  var div = document.getElementById(id) || createAndInsertMessage(id, timestamp);\r\n");
      out.write("\r\n");
      out.write("\t  // profile picture\r\n");
      out.write("\t  if (picUrl) {\r\n");
      out.write("\t    div.querySelector('.pic').style.backgroundImage = 'url(' + addSizeToGoogleProfilePic(picUrl) + ')';\r\n");
      out.write("\t  }\r\n");
      out.write("\r\n");
      out.write("\t  div.querySelector('.name').textContent = name;\r\n");
      out.write("\t  var messageElement = div.querySelector('.message');\r\n");
      out.write("\r\n");
      out.write("\t  if (text) { // If the message is text.\r\n");
      out.write("\t    messageElement.textContent = text;\r\n");
      out.write("\t    // Replace all line breaks by <br>.\r\n");
      out.write("\t    messageElement.innerHTML = messageElement.innerHTML.replace(/\\n/g, '<br>');\r\n");
      out.write("\t  } else if (imageUrl) { // If the message is an image.\r\n");
      out.write("\t    var image = document.createElement('img');\r\n");
      out.write("\t    image.addEventListener('load', function() {\r\n");
      out.write("\t      messageListElement.scrollTop = messageListElement.scrollHeight;\r\n");
      out.write("\t    });\r\n");
      out.write("\t    image.src = imageUrl + '&' + new Date().getTime();\r\n");
      out.write("\t    messageElement.innerHTML = '';\r\n");
      out.write("\t    messageElement.appendChild(image);\r\n");
      out.write("\t  }\r\n");
      out.write("\t  // Show the card fading-in and scroll to view the new message.\r\n");
      out.write("\t  setTimeout(function() {div.classList.add('visible')}, 1);\r\n");
      out.write("\t  messageListElement.scrollTop = messageListElement.scrollHeight;\r\n");
      out.write("\t  messageInputElement.focus();\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// Enables or disables the submit button depending on the values of the input\r\n");
      out.write("\t// fields.\r\n");
      out.write("\tfunction toggleButton() {\r\n");
      out.write("\t  if (messageInputElement.value) {\r\n");
      out.write("\t    submitButtonElement.removeAttribute('disabled');\r\n");
      out.write("\t  } else {\r\n");
      out.write("\t    submitButtonElement.setAttribute('disabled', 'true');\r\n");
      out.write("\t  }\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// Checks that the Firebase SDK has been correctly setup and configured.\r\n");
      out.write("\tfunction checkSetup() {\r\n");
      out.write("\t  if (!window.firebase || !(firebase.app instanceof Function) || !firebase.app().options) {\r\n");
      out.write("\t    window.alert('You have not configured and imported the Firebase SDK. ' +\r\n");
      out.write("\t        'Make sure you go through the codelab setup instructions and make ' +\r\n");
      out.write("\t        'sure you are running the codelab using `firebase serve`');\r\n");
      out.write("\t  }\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// Checks that Firebase has been imported.\r\n");
      out.write("\tcheckSetup();\r\n");
      out.write("\r\n");
      out.write("\t// Shortcuts to DOM Elements.\r\n");
      out.write("\tvar messageListElement = document.getElementById('messages');\r\n");
      out.write("\tvar messageFormElement = document.getElementById('message-form');\r\n");
      out.write("\tvar messageInputElement = document.getElementById('message');\r\n");
      out.write("\tvar submitButtonElement = document.getElementById('submit');\r\n");
      out.write("\tvar imageButtonElement = document.getElementById('submitImage');\r\n");
      out.write("\tvar imageFormElement = document.getElementById('image-form');\r\n");
      out.write("\tvar mediaCaptureElement = document.getElementById('mediaCapture');\r\n");
      out.write("\tvar userPicElement = document.getElementById('user-pic');\r\n");
      out.write("\tvar userNameElement = document.getElementById('user-name');\r\n");
      out.write("\tvar signInButtonElement = document.getElementById('sign-in');\r\n");
      out.write("\tvar signOutButtonElement = document.getElementById('sign-out');\r\n");
      out.write("\tvar signInSnackbarElement = document.getElementById('must-signin-snackbar');\r\n");
      out.write("\r\n");
      out.write("\t// Saves message on form submit.\r\n");
      out.write("\tmessageFormElement.addEventListener('submit', onMessageFormSubmit);\r\n");
      out.write("\tsignOutButtonElement.addEventListener('click', signOut);\r\n");
      out.write("\tsignInButtonElement.addEventListener('click', signIn);\r\n");
      out.write("\r\n");
      out.write("\t// Toggle for the button.\r\n");
      out.write("\tmessageInputElement.addEventListener('keyup', toggleButton);\r\n");
      out.write("\tmessageInputElement.addEventListener('change', toggleButton);\r\n");
      out.write("\r\n");
      out.write("\t// Events for image upload.\r\n");
      out.write("\timageButtonElement.addEventListener('click', function(e) {\r\n");
      out.write("\t  e.preventDefault();\r\n");
      out.write("\t  mediaCaptureElement.click();\r\n");
      out.write("\t});\r\n");
      out.write("\tmediaCaptureElement.addEventListener('change', onMediaFileSelected);\r\n");
      out.write("\r\n");
      out.write("\t// initialize Firebase\r\n");
      out.write("\tinitFirebaseAuth();\r\n");
      out.write("\r\n");
      out.write("\t// Remove the warning about timstamps change. \r\n");
      out.write("\tvar firestore = firebase.firestore();\r\n");
      out.write("\r\n");
      out.write("\t // TODO: Enable Firebase Performance Monitoring.\r\n");
      out.write("\tfirebase.performance();\r\n");
      out.write("\r\n");
      out.write("\t// We load currently existing chat messages and listen to new ones.\r\n");
      out.write("\tloadMessages();\r\n");
      out.write("\t</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"demo-layout mdl-layout mdl-js-layout mdl-layout--fixed-header\">\r\n");
      out.write("\r\n");
      out.write("  <!-- Header section containing logo -->\r\n");
      out.write("  <header class=\"mdl-layout__header mdl-color-text--white mdl-color--light-blue-700\">\r\n");
      out.write("    <div class=\"mdl-cell mdl-cell--12-col mdl-cell--12-col-tablet mdl-grid\">\r\n");
      out.write("      <div class=\"mdl-layout__header-row mdl-cell mdl-cell--12-col mdl-cell--12-col-tablet mdl-cell--12-col-desktop\">\r\n");
      out.write("        <h3><i class=\"material-icons\">chat_bubble_outline</i> Friendly Chat</h3>\r\n");
      out.write("      </div>\r\n");
      out.write("      <div id=\"user-container\">\r\n");
      out.write("        <div hidden id=\"user-pic\"></div>\r\n");
      out.write("        <div hidden id=\"user-name\"></div>\r\n");
      out.write("        <button hidden id=\"sign-out\" class=\"mdl-button mdl-js-button mdl-js-ripple-effect mdl-color-text--white\">\r\n");
      out.write("          Sign-out\r\n");
      out.write("        </button>\r\n");
      out.write("        <button hidden id=\"sign-in\" class=\"mdl-button mdl-js-button mdl-js-ripple-effect mdl-color-text--white\">\r\n");
      out.write("          <i class=\"material-icons\">account_circle</i>Sign-in with Google\r\n");
      out.write("        </button>\r\n");
      out.write("      </div>\r\n");
      out.write("    </div>\r\n");
      out.write("  </header>\r\n");
      out.write("\r\n");
      out.write("  <main class=\"mdl-layout__content mdl-color--grey-100\">\r\n");
      out.write("    <div id=\"messages-card-container\" class=\"mdl-cell mdl-cell--12-col mdl-grid\">\r\n");
      out.write("\r\n");
      out.write("      <!-- Messages container -->\r\n");
      out.write("      <div id=\"messages-card\" class=\"mdl-card mdl-shadow--2dp mdl-cell mdl-cell--12-col mdl-cell--6-col-tablet mdl-cell--6-col-desktop\">\r\n");
      out.write("        <div class=\"mdl-card__supporting-text mdl-color-text--grey-600\">\r\n");
      out.write("          <div id=\"messages\">\r\n");
      out.write("          </div>\r\n");
      out.write("          <form id=\"message-form\" action=\"#\">\r\n");
      out.write("            <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">\r\n");
      out.write("              <input class=\"mdl-textfield__input\" type=\"text\" id=\"message\" autocomplete=\"off\">\r\n");
      out.write("              <label class=\"mdl-textfield__label\" for=\"message\">Message...</label>\r\n");
      out.write("            </div>\r\n");
      out.write("            <button id=\"submit\" disabled type=\"submit\" class=\"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect\">\r\n");
      out.write("              Send\r\n");
      out.write("            </button>\r\n");
      out.write("          </form>\r\n");
      out.write("          <form id=\"image-form\" action=\"#\">\r\n");
      out.write("            <input id=\"mediaCapture\" type=\"file\" accept=\"image/*\" capture=\"camera\">\r\n");
      out.write("            <button id=\"submitImage\" title=\"Add an image\" class=\"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-color--amber-400 mdl-color-text--white\">\r\n");
      out.write("              <i class=\"material-icons\">image</i>\r\n");
      out.write("            </button>\r\n");
      out.write("          </form>\r\n");
      out.write("        </div>\r\n");
      out.write("      </div>\r\n");
      out.write("\r\n");
      out.write("      <div id=\"must-signin-snackbar\" class=\"mdl-js-snackbar mdl-snackbar\">\r\n");
      out.write("        <div class=\"mdl-snackbar__text\"></div>\r\n");
      out.write("        <button class=\"mdl-snackbar__action\" type=\"button\"></button>\r\n");
      out.write("      </div>\r\n");
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("  </main>\r\n");
      out.write("</div>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
