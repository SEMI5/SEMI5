/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.45
 * Generated at: 2019-10-29 06:30:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.chatting;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import member.model.vo.*;

public final class chattingPopup_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("member.model.vo");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

	Member loginUser = (Member)session.getAttribute("loginUser");
	//out.print(loginUser.getUserId());

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\t<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"></script>\r\n");
      out.write("\t<script src=\"http://code.jquery.com/jquery-latest.min.js\"></script>\r\n");
      out.write("\t<meta charset=\"UTF-8\">\r\n");
      out.write("    <title>Testing websockets</title>\r\n");
      out.write("</head>\r\n");
      out.write("<style>\r\n");
      out.write("\t#inputMessage{\r\n");
      out.write("\t\tpadding: 9px;\r\n");
      out.write("\t    margin: 4px;\r\n");
      out.write("\t    width: 285px;\r\n");
      out.write("\t}\r\n");
      out.write("\t#enter{\r\n");
      out.write("\t\tmargin:-3px;\r\n");
      out.write("\t\tpadding: 10px;\r\n");
      out.write("\t\tborder: 1px solid blue; \r\n");
      out.write("\t\tbackground: white;\r\n");
      out.write("\t}\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("$(function(){\r\n");
      out.write(" \t$(\"#inputMessage\").keypress(function(e) {\r\n");
      out.write("\t\tif(e.keyCode == 13){\r\n");
      out.write("\t\t\tsend();\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}); \r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div id=\"div0\" align=\"center\" style=\"padding: 15px;\">\r\n");
      out.write("\t\tKH Chatting Room\r\n");
      out.write("\t</div>\r\n");
      out.write("        \t<textarea id=\"messageWindow\" rows=\"10\" cols=\"40\" readonly=\"true\" style=\"height: 481px; width: -webkit-fill-available; resize: none\"></textarea>\r\n");
      out.write("\t\t    <input id=\"inputMessage\" type=\"text\"/>\r\n");
      out.write("    \t\t<button id=\"enter\" type=\"submit\" value=\"\" onclick=\"send();\">send</button>\r\n");
      out.write("</body>\t\r\n");
      out.write("    <script type=\"text/javascript\">\r\n");
      out.write("        var textarea = document.getElementById(\"messageWindow\");\r\n");
      out.write("        var webSocket = new WebSocket('ws://localhost:8888/KH_Groupware/broadcasting');\r\n");
      out.write("        var inputMessage = document.getElementById('inputMessage');\r\n");
      out.write("    webSocket.onerror = function(event) {\r\n");
      out.write("      onError(event)\r\n");
      out.write("    };\r\n");
      out.write("    webSocket.onopen = function(event) {\r\n");
      out.write("      onOpen(event)\r\n");
      out.write("    };\r\n");
      out.write("    webSocket.onmessage = function(event) {\r\n");
      out.write("      onMessage(event)\r\n");
      out.write("    };\r\n");
      out.write("    function onMessage(event) {\r\n");
      out.write("        textarea.value += \"상대 : \" + event.data + \"\\n\";\r\n");
      out.write("    }\r\n");
      out.write("    function onOpen(event) {\r\n");
      out.write("        textarea.value += \"connected..\\n\";\r\n");
      out.write("    }\r\n");
      out.write("    function onError(event) {\r\n");
      out.write("      alert(event.data);\r\n");
      out.write("    }\r\n");
      out.write("    function send() {\r\n");
      out.write("\t        textarea.value += \"나 : \" + inputMessage.value + \"\\n\";\r\n");
      out.write("\t        webSocket.send(inputMessage.value);\r\n");
      out.write("\t        inputMessage.value = \"\";\r\n");
      out.write("    }\r\n");
      out.write("  </script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
